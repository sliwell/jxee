Git常用命令

1. 查看用户信息
git config user.name
git config user.email
git config user.password

2. 创建本地库
git init

3. 查看远程库地址
git remote -v

语法:
git remote add "自定义的名字  仓库地址"
git remote 查询远程库别名

4. 克隆远程Github库（https）
 git clone git://github.com/sliwell/jxee.git

5.关联本地和远程库
git remote add origin git@github.com:sliwell/jxee.git

5. 查看本地库状态
git status
说明：当前是否有文件更改等等, 增加-s选项则以简短信息输出

6. 查看变更
git diff

7. 将暂存区内容提交至本地库
git commit -m “更改说明”

7. 创建SSH公钥
ssh-keygen -o

备注：访问密码是123

8. 推送远程仓库
git push -u origin master

9. 设置HTTP代理及取消代理
git config --global http.proxy http://127.0.0.1:8080
git config --global --unset http.proxy

《分支管理》
1. git switch -c
切换到指定的分支。工作树和索引将更新以匹配分支。所有新的提交都将添加到该分支的尖端中。
备注：git checkout在分支切换和新建分支的时候与switch和branch -b相同，但无法达到branch delete删除分支的功能。

《版本管理》

1. 回退到上一个版本
git reset --hard HEAD^
git reset --hard HEAD^^(回退到上上个版本） 

2. 回退到指定版本
git reset --hard caa76a6
说明：版本号caa76a6没必要写全，前几位就可以，但不能只写前2位，因为Git无法确定具体版本
reset的三种方式：
（1）--mixed：默认方式，它回退到某个版本，只保留源码，回退commit和index信息
（2）--soft： 回退到某个版本，只回退commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可。
（3）--hard： 彻底回退到某个版本，本地的源码也变为指定版本的内容



3. 查询操作记录
git reflog
说明：记录你的每一次命令

4. git fetch
说明：用于从远程库获取代码，该命令执行后需要执行git merge把远程分支合并至当前所在分支。


《推送流程》
1. git add filenames...
2. git commit -m "更改注释"
3. git pull
4. git push -u origin master

《标签管理》
    如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag
给它打上标签。比如说，我们想为我们的 runoob 项目发布一个"1.0"版本。 我们可以用 git
tag -a v1.0 命令给最新一次提交打上（HEAD）"v1.0"的标签。
  -a 选项意为"创建一个带注解的标签"。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，
  谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。
  
1. git tag -a v1.0
此命令会打开你的编辑器，让你写一句标签注解。当我们运行git log --decorate时，我们可以
看到我们的标签信息。

2. git tag -a v1.0 85fc7e7
当发布版本后忘记打标签后，可以追加标签

3. git tag
查看当前已有标签

4. git tag -d v1.0
删除指定标签

5. git show v1.0
查看指定标签修改内容


《Git进阶》
1. git add [./-u/-A]
git add .  ：会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。
git add -u ：仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区，不会提交新文件（untracked file）。（git add --update的缩写）
git add -A ：是上面两个功能的合集（git add --all的缩写） 


2. git revert
撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交。如下：
git revert HEAD 	    撤销前一次commit
git revert HEAD^        撤销前前一次commit
git revert commit_id    撤销指定的版本
git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前的提交的内容
区别：revert VS reset
git reset是直接删除指定的commit，而revert是用新的commit来回滚之前的commit。
（1）如果你已经push到线上代码库，reset删除指定commit后，再次push的时候可能导致一大堆冲突，但revert不会
（2）如果日后现有分支和历史分支需要合并的时候，reset恢复部分的代码依然会出现在历史分支里，但是revert提交的commit并不会出现在历史分支里。
（3）reset是在正常的commit历史中，删除了指定的commit，这时HEAD是向后移动了，而revert是在正常的commit历史中再commit一次，只不过是反向提交，他的HEAD是一直向前的

<<<<<<< HEAD
《Git冲突解决-Beyond Compare3》
在git的配置路径如下：C:/Users/32648/.gitconfig

[diff]
	tool = bc3
[difftool]
	prompt = false
[difftool "bc3"]
	cmd = \"C:/Program Files (x86)/Beyond Compare 3/BComp.exe\" \"$LOCAL\" \"$REMOTE\"
=======
9. 《测试主分支合并》
tips：仅用于测试
>>>>>>> gx
