    从什么时候开始，一直重复着昨天的bug，好吧，认真思考吧！
                                            ---题记
                                            
1. 代码质量定义
    着重点：易读性，可维护性，可扩展（伸缩）性
2. 如何提升代码质量？    
2.1 编写规范
    编程风格；
    注释风格；
    
2.2 语法规范
    语法检测工具（pclint，misrac）

2.3 架构及策略
    状态机
    
2.4 通信机制

2.5 资源保护
    代码的可重入性（中断及多线程环境）；

3. bug分类
3.1 非法访问（越界访问、共享资源冲突、非对齐访问）
    
    案例1
    data[32] = {0};
    tmp = eeprom_read(addr);
    for(i=0;i<tmp;i++)
    {
        data[i] = ...
    }
    由于tmp的值可能是非法值，大于32即造成访问越界问题；

    案例2
    u32 *p;
    p = (u32 *)&buf[x];
    for()
    {
        *p = xxx;   //hardfault error!
    }
    针对ARM内核的数据访问，数据地址必须是访问数据类型的整数倍，即对其访问；
    在此例子中，p的地址必须为sizeof(u32)的整数倍，否则就会造成非对齐访问错误。
    备注：使用非对齐访问标识符__packed亦可避免此类错误，但造成效率下降。
    如 __packed u32 *p;
    p = (__packed u32 *)&buf[x];
    for()
    {
        *p = xxx;    //ok
    }

3.2 异常处理
    主要是没有考虑异常情况，比如通信失败、异常数据处理等。
    案例1
    串口相机的分包取图片数据并上传平台。其中可能出现2中异常，单次取图片数据包错误和上传失败，主要措施为建立重传机制。

3.3 业务逻辑错误
    造成此类问题主要原因是理解不透彻。我们应该先透彻的了解业务再来编写程序。可以使用辅助工具帮助直观的理解，如业务图表、状态图等。
    
    Tips：
    “意大利面似的代码”——软件混乱的行话。
    今天的软件充满了bug的主要原因就是编程人员直接编写代码；
    代码积累多年后就变成了意大利面了，特性一个接一个的加上去，功能已经很混乱了；终于代码变得无法跟踪了，更不用说具体的测试功能缺陷。
    ————来自TLA+ 时序逻辑分析的重要性说明，使用数学方式验证软件的正确性。
    
    案例1-错误的业务关联
    雨量数据存储，每一小时存储一次，同时上传到平台；
    但实现成只有上传成功后才存储数据，导致本地存储数据的缺失。其实数据存储和上传是两个分开的业务，一定不要错误关联。
    
